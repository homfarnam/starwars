/* 08713f0809e975282a8eae10ba9b2c25aadf8630
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import * as Apollo from '@apollo/client';
export declare type SignupMutationVariables = Types.Exact<{
  email: Types.Scalars['String'];
  password: Types.Scalars['String'];
}>;
export declare type SignupMutation = ({
  __typename?: 'Mutation';
} & {
  signup?: Types.Maybe<({
    __typename?: 'AuthenticatedUser';
  } & Pick<Types.AuthenticatedUser, '[object Object]'>)>;
});
export declare const SignupDocument: Apollo.DocumentNode;
export declare type SignupMutationFn = Apollo.MutationFunction<SignupMutation, SignupMutationVariables>;
/**
 * __useSignupMutation__
 *
 * To run a mutation, you first call `useSignupMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSignupMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [signupMutation, { data, loading, error }] = useSignupMutation({
 *   variables: {
 *      email: // value for 'email'
 *      password: // value for 'password'
 *   },
 * });
 */

export declare function useSignupMutation(baseOptions?: Apollo.MutationHookOptions<SignupMutation, SignupMutationVariables>): Apollo.MutationTuple<SignupMutation, Types.Exact<{
  email: string;
  password: string;
}>>;
export declare type SignupMutationHookResult = ReturnType<typeof useSignupMutation>;
export declare type SignupMutationResult = Apollo.MutationResult<SignupMutation>;
export declare type SignupMutationOptions = Apollo.BaseMutationOptions<SignupMutation, SignupMutationVariables>;